#!/usr/bin/env python

import rospy, sys, os, time, tf
import string
import warnings

from gazebo_ros import gazebo_interface
from std_srvs.srv import Empty
from std_msgs.msg import Float64
from geometry_msgs.msg import Pose
from srdfdom.srdf import SRDF
from ast import literal_eval

def unpause(gazebo_namespace):
        rospy.wait_for_service(gazebo_namespace+'/unpause_physics')
        time.sleep(1)
        unpause_physics = rospy.ServiceProxy(gazebo_namespace+'/unpause_physics', Empty)
        resp = unpause_physics()
        return

if __name__ == "__main__":

        rospy.init_node('goto0')

        # Define the parameters
        model_name                      = ""
        robot_name                      = ""
        gazebo_namespace                = "/gazebo"
        joint_names                     = []
        joint_positions                 = []
        initial_xyz                     = [0,0,0]
        initial_rpy                     = [0,0,0]
        initial_pose                    = Pose()
        reference_frame                 = "world"
        model_xml                       = ""
        srdf_data                       = ""

        # Load the parameters
        model_name  = rospy.get_param('~robot_model')
        robot_name  = rospy.get_param('~robot_name')

        if rospy.has_param('~initial_xyz'):
                initial_xyz = rospy.get_param('~initial_xyz')
                initial_xyz = literal_eval(initial_xyz)

        if rospy.has_param('~initial_rpy'):
                initial_rpy = rospy.get_param('~initial_rpy')
                initial_rpy = literal_eval(initial_rpy)

        robot_description_name          = '/%s/gazebo_robot_description'%(robot_name)
        robot_description_semantic_name = '/%s/robot_description_semantic'%(robot_name)

        if robot_name != '': 	# if the robot namespace is not empty use it as the model name as well
                model_name = robot_name

        if not rospy.has_param(robot_description_name):
                rospy.logerr("%s is not available", robot_description_name)
                sys.exit(1)
        else:
                model_xml = rospy.get_param(robot_description_name)

        if not rospy.has_param(robot_description_semantic_name):
                rospy.logerr("%s is not available", robot_description_semantic_name)
                sys.exit(1)
        else:
                srdf_data = rospy.get_param(robot_description_semantic_name)

        # Wait for the spawn service
        rospy.wait_for_service("/gazebo/spawn_urdf_model")

        rospy.loginfo("spawning %s with pose [%s,%s,%s,%s,%s,%s]",model_name,initial_xyz[0],initial_xyz[1],initial_xyz[2],initial_rpy[0],initial_rpy[1],initial_rpy[2])

        # Retrieve initial pose
        initial_pose.position.x = initial_xyz[0]
        initial_pose.position.y = initial_xyz[1]
        initial_pose.position.z = initial_xyz[2]
        roll                    = initial_rpy[0]
        pitch                   = initial_rpy[1]
        yaw                     = initial_rpy[2]
        quaternion = tf.transformations.quaternion_from_euler(roll, pitch, yaw)
        initial_pose.orientation.x = quaternion[0]
        initial_pose.orientation.y = quaternion[1]
        initial_pose.orientation.z = quaternion[2]
        initial_pose.orientation.w = quaternion[3]

        # Spawn new model
        gazebo_interface.spawn_urdf_model_client(model_name, model_xml, robot_name, initial_pose, reference_frame, gazebo_namespace)

        robot = SRDF.from_xml_string(srdf_data)

        for joint in robot.group_state_map['standdown'].joints:
                joint_names.append(joint.name)
                joint_positions.append(joint.value[0])

        rospy.wait_for_service('%s/set_model_configuration'%(gazebo_namespace))
        try:
                success = gazebo_interface.set_model_configuration_client(model_name, robot_description_name, joint_names, joint_positions, gazebo_namespace)
        except rospy.ServiceException as e:
                rospy.logerr("set model configuration service call failed")

        rospy.wait_for_service('%s/unpause_physics'%(gazebo_namespace))
        try:
                success = unpause(gazebo_namespace)
        except rospy.ServiceException as e:
                rospy.logerr("unpause physics service call failed")

        rospy.sleep(1)
