robot_base_frame: $(arg base_frame)
footprint: [ [0.5, 0.32 ], [0.5, -0.32], [-0.5, -0.32], [-0.5, 0.32] ]
robot_radius: 0.0
footprint_padding: 0.0

update_frequency: 4.0
publish_frequency: 3.0
transform_tolerance: 0.5

static_layer:
  map_topic: $(arg global_frame)
  subscribe_to_updates: true
  track_unknown_space: true

obstacle_laser_layer:
  obstacle_range: 2.5
  raytrace_range: 5.5
  track_unknown_space: false # false needed for enabling global path planning through unknown space
  footprint_clearing_enabled: true
  observation_sources: laser_scan_sensor
  laser_scan_sensor: {sensor_frame: velodyne, data_type: LaserScan, topic: $(arg scan_topic), marking: true, clearing: false, inf_is_valid: true}

obstacle_camera_layer:
  obstacle_range: 2.5
  raytrace_range: 5.5
  publish_voxel_map: true
  track_unknown_space: true # true needed for disabling global path planning through unknown space
  footprint_clearing_enabled: true
  observation_sources: depth_pointcloud_sensor #velodyne_pointcloud_sensor
  #velodyne_pointcloud_sensor: {sensor_frame: velodyne, data_type: PointCloud2, topic: $(arg velodyne_pointcloud_topic), marking: true, clearing: true, min_obstacle_height: 0.25}
  depth_pointcloud_sensor: {sensor_frame: d435_link, data_type: PointCloud2, topic: $(arg depth_camera_name)/depth/points, marking: true, clearing: true, min_obstacle_height: 0.25}

# If the observation source is set to 'marking', then it will place a lethal obstacle on the costmap if that distance is less than obstacle range. Similarly,
# if the source is set to 'clearing' then it will mark all of the space between the sensor frame and the observation as free space if the distance is less than the raytrace range.
# Otherwise, it will only clear the line that is raytrace_range long (closest to the sensor).
